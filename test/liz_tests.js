// Generated by CoffeeScript 1.3.1
var assert, fs, hogan, liz, path, _;

fs = require('fs');

path = require('path');

assert = require('assert');

_ = require('underscore');

hogan = require('hogan.js');

liz = require('../liz');

describe('liz', function() {
  var exampleDir, firstFile, glob, output, secondFile;
  exampleDir = path.join(__dirname, 'example');
  output = path.join(exampleDir, 'templates.js');
  firstFile = path.join(exampleDir, 'templates1.html');
  secondFile = path.join(exampleDir, 'subfolder/moretemplates.html');
  glob = '**/*.html';
  it('should collect matching files on multiple levels', function() {
    var files;
    files = liz.findMatching(exampleDir, glob);
    assert(_.contains(files, firstFile));
    return assert(_.contains(files, secondFile));
  });
  it('should collect templates from a file', function() {
    var keys, moreTemplates, templates;
    templates = liz.extractTemplates(firstFile);
    keys = _.keys(templates);
    assert.equal(keys.length, 2);
    assert.equal(templates["first.template"], "template {{one}}");
    assert.equal(templates["second.template"], "template {{two}}");
    moreTemplates = liz.extractTemplates(secondFile);
    keys = _.keys(moreTemplates);
    assert.equal(keys.length, 1);
    return assert.equal(moreTemplates["third.template"], "template {{three}}");
  });
  it('should create an namespace list', function() {
    var expectedNamespaces, names, namespaces;
    names = ['account', 'user.address', 'user.info.name', 'account.details', 'ns1.ns2.ns3'];
    namespaces = liz.createNamespaces(names);
    expectedNamespaces = ['account', 'account.details', 'ns1', 'ns1.ns2', 'ns1.ns2.ns3', 'user', 'user.address', 'user.info', 'user.info.name'];
    assert.equal(_.difference(namespaces, expectedNamespaces).length, 0);
    return assert.equal(namespaces.length, expectedNamespaces.length);
  });
  it('should create hogan.js function strings', function() {
    var compiledTemplates, t1, t2, templates;
    templates = {
      't1': 'hello {{world}}',
      't2': 'bye bye {{thing}}'
    };
    compiledTemplates = liz.buildFunctions(templates);
    t1 = eval("new hogan.Template(" + compiledTemplates.t1 + ")");
    t2 = eval("new hogan.Template(" + compiledTemplates.t2 + ")");
    assert.equal('hello earth', t1.render({
      world: 'earth'
    }));
    return assert.equal('bye bye love', t2.render({
      thing: 'love'
    }));
  });
  return it('should tie it all together', function() {
    if (path.existsSync(output)) {
      fs.unlinkSync(output);
    }
    liz.manage(exampleDir, glob, output);
    return assert(path.existsSync(output));
  });
});
